app_id = "taiko_helder"

[l1]
name = "helder"
rpc_url = ""
ws_url = ""
beacon_url = ""

[l2]
name = "taiko"
rpc_url = "http://0.0.0.0:8545"
ws_url = "ws://0.0.0.0:8546"
taiko_token = "0xaDf33C22d0fB31bEA7861528A358C9cfD0E7AF98"          # taikoTokenAddress
l1_contract = "0xD1D5e6A666b7a41a775645fbFaB01bD2b4B29061"          # taikoInboxAddress
l2_contract = "0x1670100000000000000000000000000000010001"          # taikoAnchorAddress
router_contract = "0xFE28357BD8fFCD5f67b0E1276283Fc115941D0cF"      # preconfRouterAddress
whitelist_contract = "0x0045F84Ebed47f99552C8fEfFf8179A335b3473a"   # preconfWhitelistAddress

[gateway]
rpc_port = 10001
simulator_url = "http://0.0.0.0:8545"
propose_frequency_secs = 30
l2_target_block_time_ms = 2_000
dry_run = false
# if gateway doesnt receive a new L1 block for this amount of time, stop sequencing
l1_delay_secs = 48                                                  
# wait until this many blocks have passed to check that the L1 propose tx hasnt reorged out
l1_safe_lag = 2 
operator = "0x591317B806B96262C07105CC06CB4831008AfDf2"
coinbase = "0x591317B806B96262C07105CC06CB4831008AfDf2"
# Number of blocks to wait before refreshing the anchor, the larger this is the more blocks we can fit in a batch, but we risk it getting stale when proposing
# This is on top of the l1_safe_lag above, so from the latest L1 blocks we keep blocks up to anchor_batch_lag + l1_safe_lag old
# This should be higher than delay_sequence_slots, so we avoid reorging the previous gateway
anchor_batch_lag = 6
soft_block_url = ""
lookahead = { delay_sequence_slots = 4, buffer_secs = 6 }
jwt_secret_path = "~/taiko-geth-gattaca/geth/jwtsecret"